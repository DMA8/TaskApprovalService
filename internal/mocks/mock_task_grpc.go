// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ports/task_grpc.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "gitlab.com/g6834/team31/tasks/internal/domain/models"
)

// MockClientTask is a mock of ClientTask interface.
type MockClientTask struct {
	ctrl     *gomock.Controller
	recorder *MockClientTaskMockRecorder
}

// MockClientTaskMockRecorder is the mock recorder for MockClientTask.
type MockClientTaskMockRecorder struct {
	mock *MockClientTask
}

// NewMockClientTask creates a new mock instance.
func NewMockClientTask(ctrl *gomock.Controller) *MockClientTask {
	mock := &MockClientTask{ctrl: ctrl}
	mock.recorder = &MockClientTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientTask) EXPECT() *MockClientTaskMockRecorder {
	return m.recorder
}

// PushMail mocks base method.
func (m *MockClientTask) PushMail(ctx context.Context, mail *models.Mail) (models.TaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushMail", ctx, mail)
	ret0, _ := ret[0].(models.TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PushMail indicates an expected call of PushMail.
func (mr *MockClientTaskMockRecorder) PushMail(ctx, mail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushMail", reflect.TypeOf((*MockClientTask)(nil).PushMail), ctx, mail)
}

// PushTask mocks base method.
func (m *MockClientTask) PushTask(ctx context.Context, task *models.Task, action, kind int) (models.TaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushTask", ctx, task, action, kind)
	ret0, _ := ret[0].(models.TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PushTask indicates an expected call of PushTask.
func (mr *MockClientTaskMockRecorder) PushTask(ctx, task, action, kind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushTask", reflect.TypeOf((*MockClientTask)(nil).PushTask), ctx, task, action, kind)
}
