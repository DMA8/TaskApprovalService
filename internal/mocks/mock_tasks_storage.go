// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ports/tasks_storage.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "gitlab.com/g6834/team31/tasks/internal/domain/models"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockTasksStorage is a mock of TasksStorage interface.
type MockTasksStorage struct {
	ctrl     *gomock.Controller
	recorder *MockTasksStorageMockRecorder
}

// MockTasksStorageMockRecorder is the mock recorder for MockTasksStorage.
type MockTasksStorageMockRecorder struct {
	mock *MockTasksStorage
}

// NewMockTasksStorage creates a new mock instance.
func NewMockTasksStorage(ctrl *gomock.Controller) *MockTasksStorage {
	mock := &MockTasksStorage{ctrl: ctrl}
	mock.recorder = &MockTasksStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTasksStorage) EXPECT() *MockTasksStorageMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockTasksStorage) CreateTask(ctx context.Context, task *models.Task) (primitive.ObjectID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", ctx, task)
	ret0, _ := ret[0].(primitive.ObjectID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTasksStorageMockRecorder) CreateTask(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTasksStorage)(nil).CreateTask), ctx, task)
}

// DeleteTask mocks base method.
func (m *MockTasksStorage) DeleteTask(ctx context.Context, task *models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTasksStorageMockRecorder) DeleteTask(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTasksStorage)(nil).DeleteTask), ctx, task)
}

// ListTask mocks base method.
func (m *MockTasksStorage) ListTask(ctx context.Context, task *models.Task) ([]*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTask", ctx, task)
	ret0, _ := ret[0].([]*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTask indicates an expected call of ListTask.
func (mr *MockTasksStorageMockRecorder) ListTask(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTask", reflect.TypeOf((*MockTasksStorage)(nil).ListTask), ctx, task)
}

// ReadTask mocks base method.
func (m *MockTasksStorage) ReadTask(ctx context.Context, task *models.Task) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTask", ctx, task)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTask indicates an expected call of ReadTask.
func (mr *MockTasksStorageMockRecorder) ReadTask(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTask", reflect.TypeOf((*MockTasksStorage)(nil).ReadTask), ctx, task)
}

// ReadTaskById mocks base method.
func (m *MockTasksStorage) ReadTaskById(ctx context.Context, task *models.Task) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTaskById", ctx, task)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTaskById indicates an expected call of ReadTaskById.
func (mr *MockTasksStorageMockRecorder) ReadTaskById(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTaskById", reflect.TypeOf((*MockTasksStorage)(nil).ReadTaskById), ctx, task)
}

// UpdateTask mocks base method.
func (m *MockTasksStorage) UpdateTask(ctx context.Context, task *models.Task) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", ctx, task)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockTasksStorageMockRecorder) UpdateTask(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockTasksStorage)(nil).UpdateTask), ctx, task)
}
